// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BasePost {
  id       String   @id @default(uuid()) @map("id")
  category Category

  text     PostsText?  @relation("PostText")
  textId   String?     @unique

  video     PostsVideo? @relation("PostVideo")
  videoId   String?     @unique

  url       PostsUrl?   @relation("PostUrl")
  urlId     String?     @unique

  quote     PostsQuote? @relation("PostQuote")
  quoteId   String?     @unique

  photo     PostsPhoto? @relation("PostPhoto")
  photoId   String?     @unique

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  tags      String[]
  comments  Comment[]
  userId    String    @map("user_id")

  @@map("base_post")
}

model PostsText {
  id      String      @id @default(uuid()) @map("id")
  title   String
  preview String
  text    String
  postId  String   @unique
  post    BasePost @relation("PostText", fields: [postId], references: [id])
}

model PostsVideo {
  id      String      @id @default(uuid()) @map("id")
  title  String
  url    String
  postId String   @unique
  post   BasePost @relation("PostVideo", fields: [postId], references: [id])
}

model PostsUrl {
  id      String      @id @default(uuid()) @map("id")
  title  String
  url    String
  postId String   @unique
  post   BasePost @relation("PostUrl", fields: [postId], references: [id])
}

model PostsQuote {
  id      String      @id @default(uuid()) @map("id")
  quote  String
  author String
  postId String   @unique
  post   BasePost @relation("PostQuote", fields: [postId], references: [id])
}

model PostsPhoto {
  id      String      @id @default(uuid()) @map("id")
  title    String
  imageUrl String
  postId   String   @unique
  post     BasePost @relation("PostPhoto", fields: [postId], references: [id])
}

enum Category {
  TEXT
  VIDEO
  URL
  QUOTE
  PHOTO
}

model Comment {
  id        String   @id @default(uuid()) @map("id")
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updateAt  DateTime @updatedAt @map("update_at")
  userId    String
  post      BasePost @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @map("post_id")

  @@map("Comments")
}
